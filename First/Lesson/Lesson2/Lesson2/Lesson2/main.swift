//
//  main.swift
//  Lesson2
//
//  Created by Andrei Naumenko on 17.07.2021.
//

import Foundation

//Функция которая определяет четное число или нет

func Chet (a:Int) -> Int {          //Задаем функцию
    resualt = a % 2                 //Определяем делиться с остатком или без на 2
    return resualt                  //Возвращаем результат из функции в основной код
}

var resualt = Chet(a: 9)   //Вызов функции которая определяет четное число или нечетное

print ("\(resualt)")        //Печатаем параметр вернувшийся из функции

    if  resualt == 0 {
        print ("Четное")
    }
    else {
        print ("НЕчетное")
    }
print ("")
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Функция которая определяет делиться ли число без остатка на 3

func Tri (a:Int) -> Int {     //Задаем функцию
    TriResualt = a % 3                 //Определяем делиться с остатком или без на 3
    return TriResualt                  //Возвращаем результат из функции в основной код
}

var TriResualt = Tri(a: 80)   //Вызов функции - делиться ли заданное число на 3

print ("\(TriResualt)")        //Печатаем параметр вернувшийся из функции

if  TriResualt == 0 {
    print ("Делиться на 3 без остатка")
}
else {
    print ("НЕ делиться на 3")
}


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Функция которая определяет делиться ли число без остатка на заданное число
func SumChetTri (_ a:Int, _ b:Int) -> Int {        //Задаем функцию
    RS = a % b                 //Определяем делиться с остатком a на b
    return RS                  //Возвращаем результат из функции в основной код
}

var x1: Int = 80, x2: Int = 2

var RS = SumChetTri(x1, x2)   //Вызов функции - делиться ли заданное число на 3

print ("\(RS)")        //Печатаем параметр вернувшийся из функции

if  RS == 0 {
    print ("\(x1) делиться на \(x2) без остатка")
}
else {
    print ("НЕ делиться без остатка")
}
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

//Создать возрастающий массив из 100 чисел

var Numbers: [Int] = []                         //Объявили пустой массив
for _ in 1...10 {                              //перебераем от 1  до 100
    Numbers.append(Int.random(in: 1...1000))    //генерируем числа добавляя их в массив
}

print ("\(Numbers)")

Numbers.sort()                                  //сортируем, создаем возрастающий массив

print ("\(Numbers)")


//for (index, name) in Numbers.enumerated() {
//
//        if name % 2 == 0 {
//        Numbers.remove(at: index)
//            print ("\(Numbers) ")
//    }
//    else { name % 3 != 0
//        Numbers.remove(at: index)
//    }
//}
    
var i: Int = 0


while i < Numbers.count {
    if Numbers[i] % 2 == 0 {
            Numbers.remove(at: i)
                print ("\(Numbers) ")
        }
    else { Numbers[i] % 3 != 0
            Numbers.remove(at: i)
                print ("\(Numbers) ")
    }
    i = i + 1
}





print ("\(Numbers)")
